# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, pyusb
# This file is distributed under the same license as the pyusb package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: pyusb \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-31 14:12+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../api/usb/backend/index.rst:2
msgid ":py:mod:`usb.backend`"
msgstr ""

#: ../../api/usb/backend/index.rst:7
msgid "usb.backend - Backend interface."
msgstr ""

#: ../../api/usb/backend/index.rst:9
msgid "This module exports:"
msgstr ""

#: ../../api/usb/backend/index.rst:11
msgid "IBackend - backend interface."
msgstr ""

#: ../../api/usb/backend/index.rst:13
msgid "Backends are Python objects which implement the IBackend interface. The easiest way to do so is inherinting from IBackend."
msgstr ""

#: ../../api/usb/backend/index.rst:16
msgid "PyUSB already provides backends for libusb versions 0.1 and 1.0, and OpenUSB library. Backends modules included with PyUSB are required to export the get_backend() function, which returns an instance of a backend object. You can provide your own customized backend if you want to. Below you find a skeleton of a backend implementation module:"
msgstr ""

#: ../../api/usb/backend/index.rst:32
msgid "You can use your customized backend by passing it as the backend parameter of the usb.core.find() function. For example:"
msgstr ""

#: ../../api/usb/backend/index.rst:48
msgid "For custom backends, you are not required to supply the get_backend() function, since the application code will instantiate the backend."
msgstr ""

#: ../../api/usb/backend/index.rst:51
msgid "If you do not provide a backend to the find() function, it will use one of the defaults backend according to its internal rules. For details, consult the find() function documentation."
msgstr ""

#: ../../api/usb/backend/index.rst:58
msgid "Submodules"
msgstr ""

#: ../../api/usb/backend/index.rst:69
msgid "Package Contents"
msgstr ""

#: ../../api/usb/backend/index.rst:72
msgid "Classes"
msgstr ""

#: ../../api/usb/backend/index.rst:74
msgid "usb.backend.IBackend"
msgstr ""

#: ../../api/usb/backend/index.rst:78
msgid "Bases: :py:obj:`usb._objfinalizer.AutoFinalizedObject`"
msgstr ""

#: ../../api/usb/backend/index.rst:80
msgid "Backend interface."
msgstr ""

#: ../../api/usb/backend/index.rst:82
msgid "IBackend is the basic interface for backend implementations. By default, the methods of the interface raise a NotImplementedError exception. A backend implementation should replace the methods to provide the funcionality necessary."
msgstr ""

#: ../../api/usb/backend/index.rst:87
msgid "As Python is a dynamic typed language, you are not obligated to inherit from IBackend: everything that behaves like an IBackend is an IBackend. But you are strongly recommended to do so, inheriting from IBackend provides consistent default behavior."
msgstr ""

#: ../../api/usb/backend/index.rst:94
msgid "This function is required to return an iterable object which yields an implementation defined device identification for each USB device found in the system."
msgstr ""

#: ../../api/usb/backend/index.rst:98
msgid "The device identification object is used as argument to other methods of the interface."
msgstr ""

#: ../../api/usb/backend/index.rst:104
msgid "Return the parent device of the given device."
msgstr ""

#: ../../api/usb/backend/index.rst:109
msgid "Return the device descriptor of the given device."
msgstr ""

#: ../../api/usb/backend/index.rst:111
msgid "The object returned is required to have all the Device Descriptor fields accessible as member variables. They must be convertible (but not required to be equal) to the int type."
msgstr ""

#: ../../api/usb/backend/index.rst:115
msgid "dev is an object yielded by the iterator returned by the enumerate_devices() method."
msgstr ""

#: ../../api/usb/backend/index.rst:121
msgid "Return a configuration descriptor of the given device."
msgstr ""

#: ../../api/usb/backend/index.rst:123
msgid "The object returned is required to have all the Configuration Descriptor fields acessible as member variables. They must be convertible (but not required to be equal) to the int type."
msgstr ""

#: ../../api/usb/backend/index.rst:127
msgid "The dev parameter is the device identification object. config is the logical index of the configuration (not the bConfigurationValue field).  By \"logical index\" we mean the relative order of the configurations returned by the peripheral as a result of GET_DESCRIPTOR request."
msgstr ""

#: ../../api/usb/backend/index.rst:135
msgid "Return an interface descriptor of the given device."
msgstr ""

#: ../../api/usb/backend/index.rst:137
msgid "The object returned is required to have all the Interface Descriptor fields accessible as member variables. They must be convertible (but not required to be equal) to the int type."
msgstr ""

#: ../../api/usb/backend/index.rst:141
msgid "The dev parameter is the device identification object. The intf parameter is the interface logical index (not the bInterfaceNumber field) and alt is the alternate setting logical index (not the bAlternateSetting value). Not every interface has more than one alternate setting.  In this case, the alt parameter should be zero. config is the configuration logical index (not the bConfigurationValue field)."
msgstr ""

#: ../../api/usb/backend/index.rst:151
msgid "Return an endpoint descriptor of the given device."
msgstr ""

#: ../../api/usb/backend/index.rst:153
msgid "The object returned is required to have all the Endpoint Descriptor fields acessible as member variables. They must be convertible (but not required to be equal) to the int type."
msgstr ""

#: ../../api/usb/backend/index.rst:157
msgid "The ep parameter is the endpoint logical index (not the bEndpointAddress field) of the endpoint descriptor desired. dev, intf, alt and config are the same values already described in the get_interface_descriptor() method."
msgstr ""

#: ../../api/usb/backend/index.rst:164
msgid "Open the device for data exchange."
msgstr ""

#: ../../api/usb/backend/index.rst:166
msgid "This method opens the device identified by the dev parameter for communication. This method must be called before calling any communication related method, such as transfer methods."
msgstr ""

#: ../../api/usb/backend/index.rst:170
msgid "It returns a handle identifying the communication instance. This handle must be passed to the communication methods."
msgstr ""

#: ../../api/usb/backend/index.rst:176
msgid "Close the device handle."
msgstr ""

#: ../../api/usb/backend/index.rst:178
msgid "This method closes the device communication channel and releases any system resources related to it."
msgstr ""

#: ../../api/usb/backend/index.rst:184
msgid "Set the active device configuration."
msgstr ""

#: ../../api/usb/backend/index.rst:186
msgid "This method should be called to set the active configuration of the device. The dev_handle parameter is the value returned by the open_device() method and the config_value parameter is the bConfigurationValue field of the related configuration descriptor."
msgstr ""

#: ../../api/usb/backend/index.rst:194
msgid "Get the current active device configuration."
msgstr ""

#: ../../api/usb/backend/index.rst:196
msgid "This method returns the bConfigurationValue of the currently active configuration. Depending on the backend and the OS, either a cached value may be returned or a control request may be issued. The dev_handle parameter is the value returned by the open_device method."
msgstr ""

#: ../../api/usb/backend/index.rst:205
msgid "Set the interface alternate setting."
msgstr ""

#: ../../api/usb/backend/index.rst:207
msgid "This method should only be called when the interface has more than one alternate setting. The dev_handle is the value returned by the open_device() method. intf and altsetting are respectively the bInterfaceNumber and bAlternateSetting fields of the related interface."
msgstr ""

#: ../../api/usb/backend/index.rst:215
msgid "Claim the given interface."
msgstr ""

#: ../../api/usb/backend/index.rst:217
msgid "Interface claiming is not related to USB spec itself, but it is generally an necessary call of the USB libraries. It requests exclusive access to the interface on the system. This method must be called before using one of the transfer methods."
msgstr ""

#: ../../api/usb/backend/index.rst:222
msgid "dev_handle is the value returned by the open_device() method and intf is the bInterfaceNumber field of the desired interface."
msgstr ""

#: ../../api/usb/backend/index.rst:228
msgid "Release the claimed interface."
msgstr ""

#: ../../api/usb/backend/index.rst:230
msgid "dev_handle and intf are the same parameters of the claim_interface method."
msgstr ""

#: ../../api/usb/backend/index.rst:236
msgid "Perform a bulk write."
msgstr ""

#: ../../api/usb/backend/index.rst:238
#: ../../api/usb/backend/index.rst:268
#: ../../api/usb/backend/index.rst:298
msgid "dev_handle is the value returned by the open_device() method. The ep parameter is the bEndpointAddress field whose endpoint the data will be sent to. intf is the bInterfaceNumber field of the interface containing the endpoint. The data parameter is the data to be sent. It must be an instance of the array.array class. The timeout parameter specifies a time limit to the operation in miliseconds."
msgstr ""

#: ../../api/usb/backend/index.rst:246
#: ../../api/usb/backend/index.rst:276
#: ../../api/usb/backend/index.rst:306
msgid "The method returns the number of bytes written."
msgstr ""

#: ../../api/usb/backend/index.rst:251
msgid "Perform a bulk read."
msgstr ""

#: ../../api/usb/backend/index.rst:253
msgid "dev_handle is the value returned by the open_device() method. The ep parameter is the bEndpointAddress field whose endpoint the data will be received from. intf is the bInterfaceNumber field of the interface containing the endpoint. The buff parameter is the buffer to receive the data read, the length of the buffer tells how many bytes should be read. The timeout parameter specifies a time limit to the operation in miliseconds."
msgstr ""

#: ../../api/usb/backend/index.rst:261
#: ../../api/usb/backend/index.rst:291
#: ../../api/usb/backend/index.rst:321
msgid "The method returns the number of bytes actually read."
msgstr ""

#: ../../api/usb/backend/index.rst:266
msgid "Perform an interrupt write."
msgstr ""

#: ../../api/usb/backend/index.rst:281
msgid "Perform an interrupt read."
msgstr ""

#: ../../api/usb/backend/index.rst:283
msgid "dev_handle is the value returned by the open_device() method. The ep parameter is the bEndpointAddress field whose endpoint the data will be received from. intf is the bInterfaceNumber field of the interface containing the endpoint. The buff parameter is the buffer to receive the data read, the length of the buffer tells how many bytes should be read.  The timeout parameter specifies a time limit to the operation in miliseconds."
msgstr ""

#: ../../api/usb/backend/index.rst:296
msgid "Perform an isochronous write."
msgstr ""

#: ../../api/usb/backend/index.rst:311
msgid "Perform an isochronous read."
msgstr ""

#: ../../api/usb/backend/index.rst:313
msgid "dev_handle is the value returned by the open_device() method. The ep parameter is the bEndpointAddress field whose endpoint the data will be received from. intf is the bInterfaceNumber field of the interface containing the endpoint. The buff parameter is buffer to receive the data read, the length of the buffer tells how many bytes should be read. The timeout parameter specifies a time limit to the operation in miliseconds."
msgstr ""

#: ../../api/usb/backend/index.rst:326
msgid "Perform a control transfer on the endpoint 0."
msgstr ""

#: ../../api/usb/backend/index.rst:328
msgid "The direction of the transfer is inferred from the bmRequestType field of the setup packet."
msgstr ""

#: ../../api/usb/backend/index.rst:331
msgid "dev_handle is the value returned by the open_device() method. bmRequestType, bRequest, wValue and wIndex are the same fields of the setup packet. data is an array object, for OUT requests it contains the bytes to transmit in the data stage and for IN requests it is the buffer to hold the data read. The number of bytes requested to transmit or receive is equal to the length of the array times the data.itemsize field. The timeout parameter specifies a time limit to the operation in miliseconds."
msgstr ""

#: ../../api/usb/backend/index.rst:340
msgid "Return the number of bytes written (for OUT transfers) or the data read (for IN transfers), as an array.array object."
msgstr ""

#: ../../api/usb/backend/index.rst:346
msgid "Clear the halt/stall condition for the endpoint."
msgstr ""

#: ../../api/usb/backend/index.rst:351
msgid "Reset the device."
msgstr ""

#: ../../api/usb/backend/index.rst:356
msgid "Determine if a kernel driver is active on an interface."
msgstr ""

#: ../../api/usb/backend/index.rst:358
msgid "If a kernel driver is active, you cannot claim the interface, and the backend will be unable to perform I/O."
msgstr ""

#: ../../api/usb/backend/index.rst:364
msgid "Detach a kernel driver from an interface."
msgstr ""

#: ../../api/usb/backend/index.rst:366
msgid "If successful, you will then be able to claim the interface and perform I/O."
msgstr ""

#: ../../api/usb/backend/index.rst:372
msgid "Re-attach an interface's kernel driver, which was previously detached using detach_kernel_driver()."
msgstr ""
