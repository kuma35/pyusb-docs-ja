# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, pyusb
# This file is distributed under the same license as the pyusb-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
msgid ""
msgstr ""
"Project-Id-Version: pyusb-docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-08-29 13:44+0900\n"
"PO-Revision-Date: 2021-08-31 21:45+0900\n"
"Last-Translator: kuma35\n"
"Language-Team: Japanese\n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../api/usb/util/index.rst:2
msgid ":py:mod:`usb.util`"
msgstr ":py:mod:`usb.util`"

#: ../../api/usb/util/index.rst:6
msgid "usb.util - Utility functions."
msgstr "usb.util - ユーティリティ関数群。"

#: ../../api/usb/util/index.rst:8
msgid "This module exports:"
msgstr "本モジュールからは以下がエスクポートされます:"

#: ../../api/usb/util/index.rst:10
msgid "endpoint_address - return the endpoint absolute address."
msgstr "endpoint_address - エンドポイント絶対アドレスを返す。"

#: ../../api/usb/util/index.rst:11
msgid "endpoint_direction - return the endpoint transfer direction."
msgstr "endpoint_direction - エンドポイントの転送方向を返す。"

#: ../../api/usb/util/index.rst:12
msgid "endpoint_type - return the endpoint type"
msgstr "endpoint_type - エンドポイントタイプを返す。"

#: ../../api/usb/util/index.rst:13
msgid "ctrl_direction - return the direction of a control transfer"
msgstr "ctrl_direction - 制御転送control transfer)の転送方向を返す。"

#: ../../api/usb/util/index.rst:14
msgid "build_request_type - build a bmRequestType field of a control transfer."
msgstr "build_request_type - 制御転送(control transfer)のbmRequestTypeフィールドを構築します。"

#: ../../api/usb/util/index.rst:15
msgid "find_descriptor - find an inner descriptor."
msgstr "find_descriptor - 内部デスクリプター(inner descriptor)を探します。"

#: ../../api/usb/util/index.rst:16
msgid "claim_interface - explicitly claim an interface."
msgstr "claim_interface - 明示的にインターフェースを要求(claim)します。"

#: ../../api/usb/util/index.rst:17
msgid "release_interface - explicitly release an interface."
msgstr "release_interface - 明示的にインターフェースを解放します。"

#: ../../api/usb/util/index.rst:18
msgid "dispose_resources - release internal resources allocated by the object."
msgstr "dispose_resources - オブジェクトによって割り当てられた内部リソースを解放します。"

#: ../../api/usb/util/index.rst:19
msgid ""
"get_langids - retrieve the list of supported string languages from the "
"device."
msgstr "get_langids - get_langids-サポートされている文字列言語(string language)のリストをデバイスから取得します。"

#: ../../api/usb/util/index.rst:20
msgid "get_string - retrieve a string descriptor from the device."
msgstr "get_string - デバイスから文字列デスクリプターを取得します。"

#: ../../api/usb/util/index.rst:25
msgid "Module Contents"
msgstr "モジュール内容"

#: ../../api/usb/util/index.rst:29
msgid "Functions"
msgstr "関数"

#: ../../api/usb/util/index.rst:31
msgid "usb.util.endpoint_address"
msgstr "usb.util.endpoint_address"

#: ../../api/usb/util/index.rst:32
msgid "usb.util.endpoint_direction"
msgstr "usb.util.endpoint_direction"

#: ../../api/usb/util/index.rst:33
msgid "usb.util.endpoint_type"
msgstr "usb.util.endpoint_type"

#: ../../api/usb/util/index.rst:34
msgid "usb.util.ctrl_direction"
msgstr "usb.util.ctrl_direction"

#: ../../api/usb/util/index.rst:35
msgid "usb.util.build_request_type"
msgstr "usb.util.build_request_type"

#: ../../api/usb/util/index.rst:36
msgid "usb.util.create_buffer"
msgstr "usb.util.create_buffer"

#: ../../api/usb/util/index.rst:37
msgid "usb.util.find_descriptor"
msgstr "usb.util.find_descriptor"

#: ../../api/usb/util/index.rst:38
msgid "usb.util.claim_interface"
msgstr "usb.util.claim_interface"

#: ../../api/usb/util/index.rst:39
msgid "usb.util.release_interface"
msgstr "usb.util.release_interface"

#: ../../api/usb/util/index.rst:40
msgid "usb.util.dispose_resources"
msgstr "usb.util.dispose_resources"

#: ../../api/usb/util/index.rst:41
msgid "usb.util.get_langids"
msgstr "usb.util.get_langids"

#: ../../api/usb/util/index.rst:42
msgid "usb.util.get_string"
msgstr "usb.util.get_string"

#: ../../api/usb/util/index.rst:47
msgid "Attributes"
msgstr "Attributes"

#: ../../api/usb/util/index.rst:211
msgid "Return the endpoint absolute address."
msgstr "エンドポイント絶対アドレスを返します。"

#: ../../api/usb/util/index.rst:213
msgid ""
"The address parameter is the bEndpointAddress field of the endpoint "
"descriptor."
msgstr "addressパラメータは、エンドポイント・デスクリプターのbEndpointAddressフィールドです。"

#: ../../api/usb/util/index.rst:219
msgid "Return the endpoint direction."
msgstr "エンドポイントの方向を返します。"

#: ../../api/usb/util/index.rst:221
msgid ""
"The address parameter is the bEndpointAddress field of the endpoint "
"descriptor. The possible return values are ENDPOINT_OUT or ENDPOINT_IN."
msgstr "addressパラメータは、エンドポイントデスクリプターのbEndpointAddressフィールドです。可能な戻り値はENDPOINT_OUTまたはENDPOINT_INです。"

#: ../../api/usb/util/index.rst:228
msgid "Return the transfer type of the endpoint."
msgstr "エンドポイントの転送タイプを返します。"

#: ../../api/usb/util/index.rst:230
msgid ""
"The bmAttributes parameter is the bmAttributes field of the endpoint "
"descriptor. The possible return values are: ENDPOINT_TYPE_CTRL, "
"ENDPOINT_TYPE_ISO, ENDPOINT_TYPE_BULK or ENDPOINT_TYPE_INTR."
msgstr "bmAttributesパラメーターは、エンドポイントデスクリプターのbmAttributesフィールドです。 可能な戻り値は、ENDPOINT_TYPE_CTRL、ENDPOINT_TYPE_ISO、ENDPOINT_TYPE_BULK、ENDPOINT_TYPE_INTR です。"

#: ../../api/usb/util/index.rst:238
msgid "Return the direction of a control request."
msgstr "制御要求(control request)の方向を返します。"

#: ../../api/usb/util/index.rst:240
msgid ""
"The bmRequestType parameter is the value of the bmRequestType field of a "
"control transfer. The possible return values are CTRL_OUT or CTRL_IN."
msgstr "bmRequestTypeパラメーターは、制御転送(control transfere)のbmRequestTypeフィールドの値です。可能な戻り値はCTRL_OUTまたはCTRL_INです。"

#: ../../api/usb/util/index.rst:247
msgid "Build a bmRequestType field for control requests."
msgstr "制御要求(control requests)の為にbmRequestTypeフィールドを構築します。"

#: ../../api/usb/util/index.rst:249
msgid ""
"These is a conventional function to build a bmRequestType for a control "
"request."
msgstr "これらは、制御要求(control request)のbmRequestTypeを作成するための従来の関数です。"

#: ../../api/usb/util/index.rst:252
msgid ""
"The direction parameter can be CTRL_OUT or CTRL_IN. The type parameter can "
"be CTRL_TYPE_STANDARD, CTRL_TYPE_CLASS, CTRL_TYPE_VENDOR or "
"CTRL_TYPE_RESERVED values. The recipient can be CTRL_RECIPIENT_DEVICE, "
"CTRL_RECIPIENT_INTERFACE, CTRL_RECIPIENT_ENDPOINT or CTRL_RECIPIENT_OTHER."
msgstr "directionパラメーターは、CTRL_OUTまたはCTRL_INにすることができます。typeパラメータは、CTRL_TYPE_STANDARD、CTRL_TYPE_CLASS、CTRL_TYPE_VENDOR、CTRL_TYPE_RESERVEDにすることができます。 recipientは、CTRL_RECIPIENT_DEVICE、CTRL_RECIPIENT_INTERFACE、CTRL_RECIPIENT_ENDPOINT、またはCTRL_RECIPIENT_OTHERです。"

#: ../../api/usb/util/index.rst:258
msgid "Return the bmRequestType value."
msgstr "bmRequestTypeの値を返す。"

#: ../../api/usb/util/index.rst:263
msgid "Create a buffer to be passed to a read function."
msgstr "読み取り関数に渡されるバッファを作成します。"

#: ../../api/usb/util/index.rst:265
msgid ""
"A read function may receive an out buffer so the data is read inplace and "
"the object can be reused, avoiding the overhead of creating a new object at "
"each new read call. This function creates a compatible sequence buffer of "
"the given length."
msgstr "読み取り関数は出力バッファを受け取ることができるため、データは決まった場所に読み取られ、オブジェクトを再利用できます。これにより、新しい読み取り呼び出しごとに新しいオブジェクトを作成するオーバーヘッドを回避できます。この関数は、指定された長さの互換性のあるシーケンスバッファを作成します。"

#: ../../api/usb/util/index.rst:274
msgid "Find an inner descriptor."
msgstr "内部デスクリプター(inner descriptor)を探します。"

#: ../../api/usb/util/index.rst:276
msgid ""
"find_descriptor works in the same way as the core.find() function does, but "
"it acts on general descriptor objects. For example, suppose you have a "
"Device object called dev and want a Configuration of this object with its "
"bConfigurationValue equals to 1, the code would be like so:"
msgstr "find_descriptorは、core.find()関数と同じように機能しますが、一般的なデスクリプターオブジェクトに対して機能します。 たとえば、devというDeviceオブジェクトがあり、bConfigurationValueが1に等しいこのオブジェクトのconfigurationが必要な場合、コードは以下のようになります:"

#: ../../api/usb/util/index.rst:284
msgid ""
"You can use any field of the Descriptor as a match criteria, and you can "
"supply a customized match just like core.find() does. The find_descriptor "
"function also accepts the find_all parameter to get an iterator instead of "
"just one descriptor."
msgstr "デスクリプターの任意のフィールドを一致基準として使用でき、core.find()と同じようにカスタマイズされた一致を指定できます。find_descriptor関数は、find_allパラメーターも受け入れる事ができ、その場合は1つのデスクリプターではなくイテレーターを取得します。"

#: ../../api/usb/util/index.rst:292
msgid "Explicitly claim an interface."
msgstr "明示的にインターフェース(interface)を要求(claim)します。"

#: ../../api/usb/util/index.rst:294
msgid ""
"PyUSB users normally do not have to worry about interface claiming, as the "
"library takes care of it automatically. But there are situations where you "
"need deterministic interface claiming. For these uncommon cases, you can use "
"claim_interface."
msgstr "PyUSBユーザーは通常、ライブラリが自動的に処理するため、インターフェイスの要求(claim)について心配する必要はありません。 ただし、確定的なインターフェイスの要求(claim)が必要な場合があります。 これらのまれなケースでは、claim_interfaceを使用できます。"

#: ../../api/usb/util/index.rst:299
msgid ""
"If the interface is already claimed, either through a previously call to "
"claim_interface or internally by the device object, nothing happens."
msgstr "以前にclaim_interfaceを呼び出したかまたはデバイスオブジェクトによって内部的に呼び出された場合、インターフェイスがすでに要求(claim)されていた場合は、何も起こりません。"

#: ../../api/usb/util/index.rst:305
msgid "Explicitly release an interface."
msgstr "明示的にインターフェースを解除します。"

#: ../../api/usb/util/index.rst:307
msgid ""
"This function is used to release an interface previously claimed, either "
"through a call to claim_interface or internally by the device object."
msgstr "この関数は、claim_interfaceの呼び出しを通じて、またはデバイスオブジェクトによって内部的に呼び出された、以前に要求されたインターフェイスを解放するために使用されます。"

#: ../../api/usb/util/index.rst:311
msgid ""
"Normally, you do not need to worry about claiming policies, as the device "
"object takes care of it automatically."
msgstr "通常、デバイスオブジェクトが自動的に処理するため、あなたはポリシーの要求について心配する必要はありません。"

#: ../../api/usb/util/index.rst:317
msgid "Release internal resources allocated by the object."
msgstr "オブジェクトによって割り当てられた内部リソースを解放します。"

#: ../../api/usb/util/index.rst:319
msgid ""
"Sometimes you need to provide deterministic resources freeing, for example "
"to allow another application to talk to the device. As Python does not "
"provide deterministic destruction, this function releases all internal "
"resources allocated by the device, like device handle and interface policy."
msgstr "たとえば、別のアプリケーションがデバイスと通信できるようにするために、あなたは指定指名的なリソース解放をする必要がある場合があります。 Pythonは指定指名的な破棄を提供しないため、この関数は、デバイスハンドルやインターフェイスポリシーなど、デバイスによって割り当てられたすべての内部リソースを解放します。"

#: ../../api/usb/util/index.rst:326
msgid ""
"After calling this function, you can continue using the device object "
"normally. If the resources will be necessary again, it will be allocated "
"automatically."
msgstr "この関数を呼び出した後、デバイスオブジェクトを通常どおり使用し続けることができます。 リソースが再び必要になる場合は、自動的に割り当てられます。"

#: ../../api/usb/util/index.rst:333
msgid "Retrieve the list of supported Language IDs from the device."
msgstr "サポートされている言語IDのリストをデバイスから取得します。"

#: ../../api/usb/util/index.rst:335
msgid ""
"Most client code should not call this function directly, but instead use the "
"langids property on the Device object, which will call this function as "
"needed and cache the result."
msgstr "ほとんどのクライアントコードは、この関数を直接呼び出すべきではありませんが、代わりにDeviceオブジェクトのlangidsプロパティを使用します。これにより、必要に応じてこの関数が呼び出され、結果がキャッシュされます。"

#: ../../api/usb/util/index.rst:339
msgid ""
"USB LANGIDs are 16-bit integers familiar to Windows developers, where for "
"example instead of en-US you say 0x0409. See the file USB_LANGIDS.pdf "
"somewhere on the usb.org site for a list, which does not claim to be "
"complete. It requires \"system software must allow the enumeration and "
"selection of LANGIDs that are not currently on this list.\" It also requires "
"\"system software should never request a LANGID not defined in the LANGID "
"code array (string index = 0) presented by a device.\" Client code can check "
"this tuple before issuing string requests for a specific language ID."
msgstr "USB LANGIDは、Windows開発者に馴染みのある16ビット整数です。たとえば、en-USの代わりに0x0409と言います。完全であるとは主張していないリストについては、usb.orgサイトのどこかにあるファイルUSB_LANGIDS.pdfを参照してください。「システムソフトウェアは、現在このリストにないLANGIDの列挙と選択を許可する必要があります」(\"system software must allow the enumeration and selection of LANGIDs that are not currently on this list.\")が要求されます。 また、「システムソフトウェアは、デバイスによって提示されるLANGIDコード配列（文字列インデックス= 0）で定義されていないLANGIDを要求してはなりません」(\"system software should never request a LANGID not defined in the LANGID code array (string index = 0) presented by a device.\")も要求されます。 クライアントコードは、特定の言語IDの文字列要求を発行する前に、このタプルをチェックできます。"

#: ../../api/usb/util/index.rst:348
msgid ""
"dev is the Device object whose supported language IDs will be retrieved."
msgstr "devは、サポートされている言語IDが取得されるDeviceオブジェクトです。"

#: ../../api/usb/util/index.rst:350
msgid ""
"The return value is a tuple of integer LANGIDs, possibly empty if the device "
"does not support strings at all (which USB 3.1 r1.0 section 9.6.9 allows). "
"In that case client code should not request strings at all."
msgstr "戻り値は整数のLANGIDのタプルであり、デバイスが文字列をまったくサポートしていない場合は空になる可能性があります(USB 3.1 仕様書 r1.0 section 9.6.9で許可されています)。 その場合、クライアントコードは文字列をまったく要求しないでください。"

#: ../../api/usb/util/index.rst:354
msgid ""
"A USBError may be raised from this function for some devices that have no "
"string support, instead of returning an empty tuple. The accessor for the "
"langids property on Device catches that case and supplies an empty tuple, so "
"client code can ignore this detail by using the langids property instead of "
"directly calling this function."
msgstr "空のタプルを返す代わりに、文字列をサポートしていない一部のデバイスでは、この関数からUSBErrorが発生する場合があります。デバイスのlangidsプロパティのアクセサーはそのケースをキャッチし、空のタプルを提供するため、クライアントコードは、この関数を直接呼び出す代わりにlangidsプロパティを使用して、この詳細を無視できます。"

#: ../../api/usb/util/index.rst:363
msgid "Retrieve a string descriptor from the device."
msgstr "デバイスから文字列記述子(string descriptor)を取得します。"

#: ../../api/usb/util/index.rst:365
msgid "dev is the Device object which the string will be read from."
msgstr "devは、文字列が読み取られるDeviceオブジェクトです。"

#: ../../api/usb/util/index.rst:367
msgid ""
"index is the string descriptor index and langid is the Language ID of the "
"descriptor. If langid is omitted, the string descriptor of the first "
"Language ID will be returned."
msgstr "indexは文字列デスクリプターのインデックスであり、langidはデスクリプターの言語IDです。langidを省略すると、最初の言語IDの文字列デスクリプターが返されます。"

#: ../../api/usb/util/index.rst:371
msgid ""
"Zero is never the index of a real string. The USB spec allows a device to "
"use zero in a string index field to indicate that no string is provided. So "
"the caller does not have to treat that case specially, this function returns "
"None if passed an index of zero, and generates no traffic to the device."
msgstr "ゼロが実際の文字列のインデックスになることはありません。USB仕様では、デバイスが文字列インデックスフィールドでゼロを使用して、文字列が提供されていないことを示すことができます。したがって、呼び出し元はそのケースを特別に処理する必要はありません。この関数は、インデックスがゼロの場合にNoneを返し、デバイスへのトラフィックを生成しません。"

#: ../../api/usb/util/index.rst:377
msgid ""
"The return value is the unicode string present in the descriptor, or None if "
"the requested index was zero."
msgstr "戻り値はデスクリプターに存在するUnicode文字列であり、要求されたインデックスがゼロの場合はNoneです。"
